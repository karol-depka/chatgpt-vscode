--- src/index_openai.ts
+++ src/index_openai.ts
@@ -1,3 +1,4 @@
+"use strict";
 import OpenAI from "openai";
 import dotenv from "dotenv";
 import { performance } from "perf_hooks";
@@ -11,7 +12,7 @@
 const reset = "\x1b[0m";
 
 console.log(yellow + "Welcome to MetaPrompting Technology" + reset);
-
+dotenv.config();
 
 console.log("initializing OpenAI");
 const openai = new OpenAI({
@@ -20,7 +21,7 @@
 });
 
 const filePath = `src/index_openai.ts`;
-const origFileContent = fs.readFileSync(filePath, "utf8");
+const origFileContent = fs.readFileSync(filePath, { encoding: "utf8", flag: "r" });
 console.log(blue + `original file content:${origFileContent}` + "\x1b[0m");
 
 async function main() {
@@ -30,7 +31,7 @@
 
   const promptText = `Given this file: 
 File: ${filePath} :
-\`\`\`
+\`\`\`typescript
 ${origFileContent}
 \`\`\`
     ${userPrompt}
@@ -39,7 +40,7 @@
     
     Print me the output as .patch file that can be automatically applied. The patch should contain proper indentation.
     Just print the file patches. No explanations, no pleasantries, no prelude. 
-    Always print me only the patches (each patch surrounded by markdown \`\`\`). Never print full file contents.
+    Always print me only the patches (each patch surrounded by markdown \`\`\`diff). Never print full file contents.
     If there are source code comments in the file, keep them.
     Before each file you output, provide full file path.`;
   const chatCompletion = await openai.chat.completions.create({
@@ -49,7 +50,7 @@
     temperature: 0,
   });
 
-  // console.debug(`chatCompletion.choices`, chatCompletion.choices);
+  // console.debug(`chatCompletion.choices:`, chatCompletion.choices);
   const responseContent = chatCompletion.choices[0].message.content;
   // console.debug(`chatCompletion.choices...`, responseContent);
   console.log(green + `responseContent:${responseContent}` + "\x1b[0m");
@@ -57,7 +58,7 @@
   // console.debug(`responsePatch:` + green + responsePatch + "\x1b[0m");
   console.debug(`responsePatch:`);
   printColoredDiff(responsePatch);
-  const patched = applyPatchViaStrings(responsePatch, origFileContent); /// WARNING: PATCH IS FIRST ARG, then ORIG content
+  const patched = applyPatchViaStrings(responsePatch, origFileContent); // WARNING: PATCH IS FIRST ARG, then ORIG content
   console.info("patched: \n \n", patched);
 
   const patchedFilePath = filePath.replace(".ts", ".patched.ts");
@@ -66,7 +67,7 @@
   fs.writeFileSync(patchedFilePath, patched);
 
   const end = performance.now();
-  //   console.log(`Total time taken: ${end - start} ms.`);
+  // console.log(`Total time taken: ${end - start} ms.`);
 
   // https://openai.com/pricing
 
@@ -75,7 +76,7 @@
   console.log(`Tokens used: ${tokensUsed}`);
 
   const costInDollars = (tokensUsed * 0.06) / 1000; // assuming $0.06 per token
-  console.log(`Cost in dollars: $${costInDollars.toFixed(2)}`);
+  console.log(`Cost in dollars: $${costInDollars.toFixed(2)}`);
 
   require("ts-node").register();
   console.log("===== Will execute", patchedFilePath);
Parsing patch...
Finished parsing patch.
Applying patch...
Adding line: +"use strict";
Keeping original line:  import OpenAI from "openai";
Keeping original line:  import dotenv from "dotenv";
Keeping original line:  import { performance } from "perf_hooks";
Keeping original line:  const reset = "\x1b[0m";
Keeping original line:  
Keeping original line:  console.log(yellow + "Welcome to MetaPrompting Technology" + reset);
Removing line: -
Adding line: +dotenv.config();
Keeping original line:  
Keeping original line:  console.log("initializing OpenAI");
Keeping original line:  const openai = new OpenAI({
Keeping original line:  });
Keeping original line:  
Keeping original line:  const filePath = `src/index_openai.ts`;
Removing line: -const origFileContent = fs.readFileSync(filePath, "utf8");
Adding line: +const origFileContent = fs.readFileSync(filePath, { encoding: "utf8", flag: "r" });
Keeping original line:  console.log(blue + `original file content:${origFileContent}` + "\x1b[0m");
Keeping original line:  
Keeping original line:  async function main() {
Keeping original line:  
Keeping original line:    const promptText = `Given this file: 
Keeping original line:  File: ${filePath} :
Removing line: -\`\`\`
Adding line: +\`\`\`typescript
Keeping original line:  ${origFileContent}
Keeping original line:  \`\`\`
Keeping original line:      ${userPrompt}
Keeping original line:      
Keeping original line:      Print me the output as .patch file that can be automatically applied. The patch should contain proper indentation.
Keeping original line:      Just print the file patches. No explanations, no pleasantries, no prelude. 
Removing line: -    Always print me only the patches (each patch surrounded by markdown \`\`\`). Never print full file contents.
Adding line: +    Always print me only the patches (each patch surrounded by markdown \`\`\`diff). Never print full file contents.
Keeping original line:      If there are source code comments in the file, keep them.
Keeping original line:      Before each file you output, provide full file path.`;
Keeping original line:    const chatCompletion = await openai.chat.completions.create({
Keeping original line:      temperature: 0,
Keeping original line:    });
Keeping original line:  
Removing line: -  // console.debug(`chatCompletion.choices`, chatCompletion.choices);
Adding line: +  // console.debug(`chatCompletion.choices:`, chatCompletion.choices);
Keeping original line:    const responseContent = chatCompletion.choices[0].message.content;
Keeping original line:    // console.debug(`chatCompletion.choices...`, responseContent);
Keeping original line:    console.log(green + `responseContent:${responseContent}` + "\x1b[0m");
Keeping original line:    // console.debug(`responsePatch:` + green + responsePatch + "\x1b[0m");
Keeping original line:    console.debug(`responsePatch:`);
Keeping original line:    printColoredDiff(responsePatch);
Removing line: -  const patched = applyPatchViaStrings(responsePatch, origFileContent); /// WARNING: PATCH IS FIRST ARG, then ORIG content
Adding line: +  const patched = applyPatchViaStrings(responsePatch, origFileContent); // WARNING: PATCH IS FIRST ARG, then ORIG content
Keeping original line:    console.info("patched: \n \n", patched);
Keeping original line:  
Keeping original line:    const patchedFilePath = filePath.replace(".ts", ".patched.ts");
Keeping original line:    fs.writeFileSync(patchedFilePath, patched);
Keeping original line:  
Keeping original line:    const end = performance.now();
Removing line: -  //   console.log(`Total time taken: ${end - start} ms.`);
Adding line: +  // console.log(`Total time taken: ${end - start} ms.`);
Keeping original line:  
Keeping original line:    // https://openai.com/pricing
Keeping original line:  
Keeping original line:    console.log(`Tokens used: ${tokensUsed}`);
Keeping original line:  
Keeping original line:    const costInDollars = (tokensUsed * 0.06) / 1000; // assuming $0.06 per token
Removing line: -  console.log(`Cost in dollars: $${costInDollars.toFixed(2)}`);
Adding line: +  console.log(`Cost in dollars: $${costInDollars.toFixed(2)}`);
Keeping original line:  
Keeping original line:    require("ts-node").register();
Keeping original line:    console.log("===== Will execute", patchedFilePath);
Finished applying patch.